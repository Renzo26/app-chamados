document.addEventListener('DOMContentLoaded', () => {
    // Captura os elementos da interface
    const btnSalvar = document.getElementById("btnSalvar")
    const unidadesContainer = document.getElementById('unidades-container');
    const totalChamadosSpan = document.getElementById('total-chamados-numero');
    const searchInput = document.getElementById('search');
    const contextMenu = document.getElementById('context-menu');
    const resetContextItem = document.getElementById('reset-context-item');


    async function obterContadores() {
        const response = await fetch(`${BACKEND_URL}/contadores`);
        const data = await response.json();
        console.log("üîπ Contadores recebidos:", data);
    }
    

    async function salvarDados() {
        const salvarResponse = await fetch(`${BACKEND_URL}/salvar_dados`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ contadores })
        });
    
        const data = await salvarResponse.json();
        console.log("‚úÖ Resposta do backend:", data);
    }
    
    // Verifica se os elementos foram encontrados
    if (!btnSalvar || !unidadesContainer || !totalChamadosSpan || !searchInput || !contextMenu || !resetContextItem) {
        console.error("‚ùå Erro: Um ou mais elementos n√£o foram encontrados no HTML.");
        return; // Sai da fun√ß√£o se algum elemento n√£o existir
    }

    // Estrutura de dados com as unidades agrupadas por tipo
    const unidadesPorTipo = {
        "UPAs": ["UPA Alvarenga", "UPA Alves Dias", "UPA Baeta", "UPA Demarchi", "UPA Jardim Silvina / Selecta", "UPA Paulic√©ia", "UPA Riacho", "UPA Rudge", "UPA S. Pedro", "UPA Silvina"],
        "UBSs": ["UBS Alvarenga", "UBS Alves Dias", "UBS Arei√£o", "UBS Baeta", "UBS Batistini", "UBS Calux", "UBS Caminho do Mar", "UBS Demarchi", "UBS Farina", "UBS Ferraz√≥polis", "UBS Finco", "UBS Ip√™", "UBS Jordan√≥polis", "UBS Leblon", "UBS Montanh√£o", "UBS Nazareth", "UBS Orqu√≠deas", "UBS Parque S√£o Bernardo", "UBS Paulic√©ia", "UBS Planalto", "UBS Represa", "UBS Riacho", "UBS Rudge Ramos", "UBS Santa Cruz", "UBS Santa Terezinha", "UBS S√£o Pedro", "UBS S√£o Pedro II", "UBS Selecta", "UBS Silvina", "UBS Tabo√£o", "UBS Uni√£o", "UBS Vila Dayse", "UBS Vila Esperan√ßa", "UBS Vila Euclides", "UBS Vila Marchi", "UBS Vila Rosa"],
        "CAPs": ["CAPS III AD Alves Dias", "CAPS III √Ålc Drog Alvarenga", "CAPS III √Ålc. e Drog Cent", "CAPS III √Ålc. e Drog Inf. Juv", "CAPS III Alvarenga", "CAPS III Alves Dias", "CAPS III Centro", "CAPS III Farina", "CAPS III Rudge Ramos", "CAPS III Selecta", "CAPS Inf. Juvenil"],
        "Outros": ["Almoxarifado Central", "CEO Alvarenga", "CEO Nova Petr√≥polis", "CEO Silvina", "CER", "Chamado errado / Sem localiza√ß√£o", "Comunica√ß√£o", "Consult√≥rio na Rua", "Departamento de Administra√ß√£o da Sa√∫de", "Departamento de Apoio a Gest√£o do SUS", "Departamento de Aten√ß√£o a Sa√∫de e Vigil√¢ncia", "Departamento de Aten√ß√£o B√°sica e Gest√£o do Cuidado", "Departamento de Aten√ß√£o Especializada", "Departamento de Aten√ß√£o Hospitalar, Urg√™ncias  Emerg√™ncias", "Divis√£o Ambulatorial", "Divis√£o Assist√™ncia Farmac√™utica", "Divis√£o de Adm. De Bens, Serv. E Pessoal - SS", "Divis√£o de Adm. Do Fundo Municipal de Sa√∫de", "Divis√£o de Compras", "Divis√£o de Contratos", "Divis√£o de Educa√ß√£o Permanente e Gest√£o Participativa", "Divis√£o de Patrim√¥nio", "Divis√£o de Planejamento em Sa√∫de", "Divis√£o de Sa√∫de Bucal", "Divis√£o de Sa√∫de do Trabalhador e do Meio Ambiente", "Divis√£o de Sa√∫de Mental", "Divis√£o de Unidade B√°sica de Sa√∫de", "Divis√£o de Veterin√°ria e Controle de Zoonoses", "Divis√£o de Vigil√¢ncia Epidemiol√≥gica", "Divis√£o de Vigil√¢ncia Sanit√°ria", "Divis√£o Infraestrutura (Corporativo)", "Divis√£o Regula√ß√£o", "Divis√£o T√©cnico Assistencial", "Dunacor", "Escola de Sa√∫de", "Farm√°cia de Medicamentos Especializados - FME", "FMABC", "FUNCRAF", "Gabinete da Secretaria de Sa√∫de", "GSS | Gabinete Secretaria da Sa√∫de", "HA - Hospital Anchieta", "HC - Hospital das Clinicas", "HMU - Hospital da Mulher", "Hospital da Reabilita√ß√£o - ABC", "Hospital de Olhos", "Hospital Municipal de Olhos.", "HU - Hospital Urg√™ncia", "IML Demarchi - Corpo de Delito", "Juridico", "NEU - N√∫cleo Educa√ß√£o de Urg√™ncia", "Nutrarte", "Outras Secretarias", "PA Psiqui√°trico", "PA Tabo√£o", "Parque Estoril (SS)", "POLIALVARENGA", "POLICENTRO", "POLIMAGEM", "Recursos Humanos", "Resid√™ncias Terap√™uticas", "SAAJ - Serv. Atendimento A√ß√£o Judicial", "Sala de Choque", "SAME", "SAMU - Avan√ßado", "SAMU - Basica", "SAMU - Serv. Administrativos", "Se√ß√£o da Central de Regula√ß√£o em Sa√∫de", "Se√ß√£o de Auditoria em Sa√∫de", "Se√ß√£o de Controle e Avalia√ß√£o", "Se√ß√£o de Educa√ß√£o em Sa√∫de", "Se√ß√£o de Gest√£o Participativa", "Se√ß√£o de Informa√ß√£o para gest√£o", "Se√ß√£o de Lab. Municipal de Sa√∫de P√∫blica", "Se√ß√£o de Or√ßamento e Planej. Em Sa√∫de", "Se√ß√£o de Padroniza√ß√£o e Programa√ß√£o", "Se√ß√£o de Programa√ß√£o", "Se√ß√£o de Unidade, Org. e Acesso em Assist√™ncia Farmac√™utica", "Se√ß√£o de Verifica√ß√£o de √ìbitos", "Secret√°ria da Administra√ß√£o", "Secret√°ria de Finan√ßas", "Servi√ßo de Expediente", "Servi√ßo e Transporte Sanit√°rio e Administrativo", "SETIH - Transporte InterHospitalar - Avan√ßado", "SETIH - Transporte InterHospitalar - Basico", "SIGMA", "UA - Unidade de Acolhimento Transit√≥rio", "UGP", "Unidade de Coordena√ß√£o de Programas", "Unidade Gestora do Projeto", "Unidades Externas"]
    };

    const BACKEND_URL = "http://127.0.0.1:5001";

    const API_URL = "http://127.0.0.1:5002";
    

    let contadores = carregarContadores();
    let totalChamados = calcularTotalChamados();

    function carregarContadores() {
        const contadoresSalvos = localStorage.getItem('contadores');
        if (contadoresSalvos) {
            return JSON.parse(contadoresSalvos);
        }
        return criarContadores(unidadesPorTipo);
    }

    function criarContadores(unidades) {
        const contadoresTemp = {};
        for (const tipo in unidades) {
            unidades[tipo].forEach(unidade => {
                contadoresTemp[unidade] = 0;
            });
        }
        return contadoresTemp;
    }

    function calcularTotalChamados() {
        return Object.values(contadores).reduce((acc, val) => acc + val, 0);
    }

    function atualizarTotalChamados() {
        totalChamados = calcularTotalChamados();
        totalChamadosSpan.textContent = totalChamados;
    }

    function criarGruposUnidades(unidadesFiltradas = unidadesPorTipo) {
        unidadesContainer.innerHTML = '';

        for (const tipo in unidadesFiltradas) {
            const grupoDiv = document.createElement('div');
            grupoDiv.classList.add('unidade-grupo');

            const tituloGrupo = document.createElement('h3');
            tituloGrupo.textContent = tipo;
            grupoDiv.appendChild(tituloGrupo);

            const unidadesDoGrupo = unidadesFiltradas[tipo];
            unidadesDoGrupo.forEach(unidade => {
                const button = document.createElement('button');
                button.classList.add('unidade-button');
                button.textContent = `${unidade}: ${contadores[unidade] || 0}`;
                button.addEventListener('click', () => {
                    contadores[unidade] = (contadores[unidade] || 0) + 1;
                    button.textContent = `${unidade}: ${contadores[unidade]}`;
                    atualizarTotalChamados();
                    salvarContadores();
                });
                grupoDiv.appendChild(button);
            });

            unidadesContainer.appendChild(grupoDiv);
        }
    }

    function salvarContadores() {
        localStorage.setItem('contadores', JSON.stringify(contadores));
    }

    criarGruposUnidades();
    atualizarTotalChamados();

    unidadesContainer.addEventListener('contextmenu', (event) => {
        event.preventDefault();
        contextMenu.style.display = 'block';
        contextMenu.style.left = `${event.pageX}px`;
        contextMenu.style.top = `${event.pageY}px`;
    });

    document.addEventListener('click', (event) => {
        if (!contextMenu.contains(event.target)) {
            contextMenu.style.display = 'none';
        }
    });

    resetContextItem.addEventListener('click', () => {
        contadores = criarContadores(unidadesPorTipo);
        criarGruposUnidades();
        atualizarTotalChamados();
        salvarContadores();
        contextMenu.style.display = 'none';
        mostrarMensagem('Contadores resetados!');
    });

    btnSalvar.addEventListener('click', salvarDados);

    searchInput.addEventListener('input', () => {
        const searchTerm = searchInput.value.toLowerCase();
        const unidadesFiltradas = {};
        for (const tipo in unidadesPorTipo) {
            unidadesFiltradas[tipo] = unidadesPorTipo[tipo].filter(unidade =>
                unidade.toLowerCase().includes(searchTerm)
            );
        }
        criarGruposUnidades(unidadesFiltradas);
    });

    async function salvarDados() {
        try {
            await esperarBackend();
            const salvarResponse = await fetch(`${BACKEND_URL}/salvar_dados`, {  // Alterado para BACKEND_URL
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ contadores })
            });
    
            const data = await salvarResponse.json();
            if (data.sucesso) {
                mostrarMensagem("‚úÖ Dados salvos com sucesso!");
            } else {
                mostrarMensagem("‚ö†Ô∏è Erro ao salvar os dados.");
            }
        } catch (error) {
            mostrarMensagem("‚ùå Erro: Backend n√£o est√° rodando.");
        }
    }
    
    
    
    
    function carregarContadores() {
        const contadoresSalvos = localStorage.getItem('contadores');
        if (contadoresSalvos) {
            return JSON.parse(contadoresSalvos);
        }
        return criarContadores(unidadesPorTipo);
    }
    
    async function esperarBackend() {
        for (let i = 20; i > 0; i--) {  // Aumentado para 20 tentativas
            try {
                const response = await fetch(`${BACKEND_URL}/ping`);
                if (response.ok) {
                    console.log("‚úÖ Backend est√° rodando!");
                    return;
                }
            } catch (error) {
                console.log("‚è≥ Aguardando backend iniciar...");
            }
            await new Promise(resolve => setTimeout(resolve, 2000)); // Espera 2 segundos entre tentativas
        }
        console.error("‚ùå Backend n√£o iniciou a tempo!");
    }
    
    
    document.addEventListener('DOMContentLoaded', async () => {
        await esperarBackend();
        criarGruposUnidades();
        atualizarTotalChamados();
    });
    

    function mostrarMensagem(mensagem) {
        const mensagemElement = document.createElement('div');
        mensagemElement.textContent = mensagem;
        mensagemElement.style.position = 'fixed';
        mensagemElement.style.top = '20px';
        mensagemElement.style.left = '50%';
        mensagemElement.style.transform = 'translateX(-50%)';
        mensagemElement.style.padding = '10px';
        mensagemElement.style.backgroundColor = '#f0f0f0';
        mensagemElement.style.border = '1px solid #ccc';
        mensagemElement.style.borderRadius = '5px';
        document.body.appendChild(mensagemElement);

        setTimeout(() => {
            document.body.removeChild(mensagemElement);
        }, 3000);
    }
});