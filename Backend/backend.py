import tkinter as tk
import tkinter.messagebox as messagebox
import pandas as pd
import os
import json
from datetime import datetime, timedelta
from pathlib import Path
import getpass  # Para obter o nome do usu√°rio logado

from flask import Flask, request, jsonify
from flask_cors import CORS  

import sys
import os

if sys.stdout is None:
    sys.stdout = open(os.devnull, 'w', encoding='utf-8')
else:
    sys.stdout.reconfigure(encoding='utf-8')

 
import logging

# üîπ Configura o logging corretamente antes de qualquer uso
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# üîπ Se houver handlers configurados, limpamos para evitar erros
logger = logging.getLogger()
if logger.hasHandlers():
    logger.handlers.clear()
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

logging.info("‚úÖ Logging configurado corretamente!")


app = Flask(__name__)
CORS(app)  

# Obt√©m o nome do usu√°rio logado no sistema
NUMERO_USUARIO = getpass.getuser()

# Define a pasta de planilhas no diret√≥rio "Documentos" do usu√°rio atual
PASTA_USUARIO = Path.home() / "Documents" / "Planilhas Chamados"

# Garante que a pasta existe
PASTA_USUARIO.mkdir(parents=True, exist_ok=True)

@app.route('/ping', methods=['GET'])
def ping():
    return jsonify({"status": "ok"}), 200


# Arquivo JSON para salvar os contadores
DATA_FILE = PASTA_USUARIO / "chamados.json"

@app.route('/contadores', methods=['GET'])
def obter_contadores():
    """Retorna os contadores armazenados no JSON"""
    try:
        with open('chamados.json', 'r') as file:
            contadores = json.load(file)
        return jsonify({"sucesso": True, "contadores": contadores})
    except FileNotFoundError:
        return jsonify({"sucesso": False, "erro": "Arquivo de contadores n√£o encontrado"}), 404


# Fun√ß√£o para determinar o nome da planilha com base na data atual
def obter_nome_planilha():
    data_atual = datetime.now()
    nome_planilha = f"chamados_{data_atual.strftime('%d-%m-%Y')}.xlsx"
    return PASTA_USUARIO / nome_planilha

# Carrega os chamados salvos, se existirem
if DATA_FILE.exists():
    with open(DATA_FILE, "r") as file:
        chamados = json.load(file)
else:
    chamados = {}

# Fun√ß√£o para carregar dados existentes da planilha ou criar uma nova
def carregar_dados_planilha():
    planilha_path = obter_nome_planilha()
    if planilha_path.exists():
        try:
            df = pd.read_excel(planilha_path)
            return dict(zip(df['Unidade'], df['Chamados']))
        except Exception as e:
            print(" Erro ao carregar dados da planilha:", e)
            return {}
    return {}

# Carrega dados existentes da planilha ao iniciar
dados_existentes = carregar_dados_planilha()
chamados.update(dados_existentes)

def verificar_ou_criar_planilha():
    """Verifica se a planilha deve ser criada ou atualizada."""
    planilha_path = obter_nome_planilha()

    if not planilha_path.exists():
        return True  # Cria nova planilha
    
    # Verifica a data da √∫ltima modifica√ß√£o da planilha
    ultima_modificacao = datetime.fromtimestamp(planilha_path.stat().st_mtime)
    
    if datetime.now() - ultima_modificacao > timedelta(days=31):
        return True  # Cria nova planilha
    
    return False  # Atualiza a existente
    
@app.route("/zerar_chamados", methods=["POST"])
def zerar_chamados():
    """Zera todos os chamados."""
    global chamados
    chamados = {unidade: 0 for unidade in chamados}  # Reseta todos os contadores para zero

    # Salvar JSON
    try:
        with open(DATA_FILE, "w") as file:
            json.dump(chamados, file)
        print(" Todos os chamados foram zerados.")
    except Exception as e:
        print(" Erro ao salvar o arquivo JSON:", e)
        return jsonify({"sucesso": False, "erro": f"Erro ao salvar JSON: {str(e)}"}), 500

    return jsonify({"sucesso": True, "mensagem": "Todos os chamados foram zerados com sucesso!"})
    
    
if not os.path.exists(PASTA_USUARIO):
    os.makedirs(PASTA_USUARIO)
    print(f" Pasta criada: {PASTA_USUARIO}")

@app.route('/salvar_dados', methods=['POST'])
def salvar_dados():
    try:
        print("üîç Iniciando o processamento dos dados...")
        data = request.get_json()
        print("üì© Dados recebidos no backend:", data)  

        if not data or "contadores" not in data:
            print("‚ùå ERRO: Dados inv√°lidos recebidos!")
            return jsonify({"sucesso": False, "erro": "Dados inv√°lidos"}), 400

        contadores = data["contadores"]
        print(f"‚úÖ Salvando os seguintes dados: {contadores}")

        # Criar DataFrame e salvar em Excel
        planilha_path = obter_nome_planilha()
        print(f"üìÇ Salvando planilha em: {planilha_path}")

        df_novo = pd.DataFrame(list(contadores.items()), columns=["Unidade", "Chamados"])
        df_novo.to_excel(planilha_path, index=False, engine="openpyxl")

        print("‚úÖ Planilha salva com sucesso!")

        # üîπ Adicionando retorno expl√≠cito
        resposta = {"sucesso": True, "mensagem": "Dados salvos com sucesso!"}
        print("üì§ Enviando resposta para o frontend:", resposta)  

        return jsonify(resposta)

    except Exception as e:
        print("‚ùå ERRO AO SALVAR DADOS:", e)  # Isso imprimir√° o erro no terminal
        return jsonify({"sucesso": False, "erro": f"Erro ao salvar: {str(e)}"}), 500
    
    # Criar ou atualizar a planilha
    try:
        planilha_path = obter_nome_planilha()
        
        if verificar_ou_criar_planilha():  # Verifica se deve criar uma nova planilha
            # Cria uma nova planilha
            df_novo = pd.DataFrame(list(contadores.items()), columns=["Unidade", "Chamados"])
            df_novo.to_excel(planilha_path, index=False, engine="openpyxl")

            print(f"üìÇ Nova planilha criada em: {planilha_path}")
        else:
            # Atualiza a planilha existente
            df_existente = pd.read_excel(planilha_path)
            df_novo = pd.DataFrame(list(contadores.items()), columns=["Unidade", "Chamados"])
            df_atualizado = pd.concat([df_existente, df_novo]).groupby("Unidade", as_index=False).sum()
            df_atualizado.to_excel(planilha_path, index=False)
            print(f" Planilha atualizada em: {planilha_path}")

    except Exception as e:
        print(" Erro ao salvar a planilha:", e)
        return jsonify({"sucesso": False, "erro": f"Erro ao salvar planilha: {str(e)}"}), 500

    return jsonify({"sucesso": True, "mensagem": "Dados salvos com sucesso!"})




    # Criar DataFrame e salvar em Excel
    try:
        planilha_path = obter_nome_planilha()
        
        # Verifica se a planilha j√° existe e se n√£o passou de 31 dias desde a √∫ltima cria√ß√£o
        if planilha_path.exists():
            df_existente = pd.read_excel(planilha_path)
            df_novo = pd.DataFrame(list(chamados.items()), columns=["Unidade", "Chamados"])
            df_atualizado = df_existente.add(df_novo.set_index('Unidade'), fill_value=0).reset_index()  # Atualiza os dados existentes
            df_atualizado.to_excel(planilha_path, index=False)
            print(f" Planilha atualizada em: {planilha_path}")
        else:
            # Se n√£o existir, cria uma nova planilha
            df_novo = pd.DataFrame(list(chamados.items()), columns=["Unidade", "Chamados"])
            df_novo.to_excel(planilha_path, index=False)
            print(f" Planilha criada em: {planilha_path}")

    except Exception as e:
        print(" Erro ao salvar a planilha:", e)
        return jsonify({"sucesso": False, "erro": f"Erro ao salvar planilha: {str(e)}"}), 500

    return jsonify({"sucesso": True, "mensagem": "Dados salvos com sucesso!"})

@app.route("/contadores", methods=["GET"])
def get_contadores():
    """Retorna os contadores salvos no JSON"""
    try:
        with open(DATA_FILE, "r") as file:
            chamados = json.load(file)
        return jsonify(chamados)
    except Exception as e:
        print(" Erro ao ler o arquivo JSON:", e)
        return jsonify({"erro": "Erro ao ler os contadores"}), 500

@app.route("/total_chamados", methods=["GET"])
def get_total_chamados():
    """Retorna o total de chamados"""
    try:
        with open(DATA_FILE, "r") as file:
            chamados = json.load(file)
        total = sum(chamados.values())
        return jsonify({"total": total})
    except Exception as e:
        print(" Erro ao calcular o total de chamados:", e)
        return jsonify({"erro": "Erro ao calcular o total de chamados"}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5001, debug=True)


 
# --- Configura√ß√µes ---
UNIDADES = [
    "Almoxarifado Central", "CAPS III AD Alves Dias", "CAPS III √Ålc Drog Alvarenga",
    "CAPS III √Ålc. e Drog Cent", "CAPS III √Ålc. e Drog Inf. Juv", "CAPS III Alvarenga",
    "CAPS III Alves Dias", "CAPS III Centro", "CAPS III Farina", "CAPS III Rudge Ramos",
    "CAPS III Selecta", "CAPS Inf. Juvenil", "Centro Cir√∫rgico e Castra M√≥vel",
    "Centro de refer√™ncia - TEA", "CEO Alvarenga", "CEO Nova Petr√≥polis",
    "CEO Silvina", "CER", "Chamado errado / Sem localiza√ß√£o", "Comunica√ß√£o",
    "Consult√≥rio na Rua", "Departamento de Administra√ß√£o da Sa√∫de",
    "Departamento de Apoio a Gest√£o do SUS", "Departamento de Aten√ß√£o a Sa√∫de e Vigil√¢ncia",
    "Departamento de Aten√ß√£o B√°sica e Gest√£o do Cuidado", "Departamento de Aten√ß√£o Especializada",
    "Departamento de Aten√ß√£o Hospitalar, Urg√™ncias  Emerg√™ncias", "Divis√£o Ambulatorial",
    "Divis√£o Assist√™ncia Farmac√™utica", "Divis√£o de Adm. De Bens, Serv. E Pessoal - SS",
    "Divis√£o de Adm. Do Fundo Municipal de Sa√∫de", "Divis√£o de Compras",
    "Divis√£o de Contratos", "Divis√£o de Educa√ß√£o Permanente e Gest√£o Participativa",
    "Divis√£o de Patrim√¥nio", "Divis√£o de Planejamento em Sa√∫de", "Divis√£o de Sa√∫de Bucal",
    "Divis√£o de Sa√∫de do Trabalhador e do Meio Ambiente", "Divis√£o de Sa√∫de Mental",
    "Divis√£o de Unidade B√°sica de Sa√∫de", "Divis√£o de Veterin√°ria e Controle de Zoonoses",
    "Divis√£o de Vigil√¢ncia Epidemiol√≥gica", "Divis√£o de Vigil√¢ncia Sanit√°ria",
    "Divis√£o Infraestrutura (Corporativo)", "Divis√£o Regula√ß√£o", "Divis√£o T√©cnico Assistencial",
    "Dunacor", "Escola de Sa√∫de", "Farm√°cia de Medicamentos Especializados - FME",
    "FMABC", "FUNCRAF", "Gabinete da Secretaria de Sa√∫de", "GSS | Gabinete Secretaria da Sa√∫de",
    "HA - Hospital Anchieta", "HC - Hospital das Clinicas", "HMU - Hospital da Mulher",
    "Hospital da Reabilita√ß√£o - ABC", "Hospital de Olhos", "Hospital Municipal de Olhos.",
    "HU - Hospital Urg√™ncia", "IML Demarchi - Corpo de Delito", "Juridico", "NEU - N√∫cleo Educa√ß√£o de Urg√™ncia",
    "Nutrarte", "Outras Secretarias", "PA Psiqui√°trico", "PA Tabo√£o", "Parque Estoril (SS)",
    "POLIALVARENGA", "POLICENTRO", "POLIMAGEM", "Recursos Humanos",
    "Resid√™ncias Terap√™uticas", "SAAJ - Serv. Atendimento A√ß√£o Judicial", "Sala de Choque",
    "SAME", "SAMU - Avan√ßado", "SAMU - Basica", "SAMU - Serv. Administrativos",
    "Se√ß√£o da Central de Regula√ß√£o em Sa√∫de", "Se√ß√£o de Auditoria em Sa√∫de",
    "Se√ß√£o de Controle e Avalia√ß√£o", "Se√ß√£o de Educa√ß√£o em Sa√∫de", "Se√ß√£o de Gest√£o Participativa",
    "Se√ß√£o de Informa√ß√£o para gest√£o", "Se√ß√£o de Lab. Municipal de Sa√∫de P√∫blica",
    "Se√ß√£o de Or√ßamento e Planej. Em Sa√∫de", "Se√ß√£o de Padroniza√ß√£o e Programa√ß√£o",
    "Se√ß√£o de Programa√ß√£o", "Se√ß√£o de Unidade, Org. e Acesso em Assist√™ncia Farmac√™utica",
    "Se√ß√£o de Verifica√ß√£o de √ìbitos", "Secret√°ria da Administra√ß√£o", "Secret√°ria de Finan√ßas",
    "Servi√ßo de Expediente", "Servi√ßo e Transporte Sanit√°rio e Administrativo",
    "SETIH - Transporte InterHospitalar - Avan√ßado", "SETIH - Transporte InterHospitalar - Basico",
    "SIGMA", "UA - Unidade de Acolhimento Transit√≥rio", "UBS Alvarenga", "UBS Alves Dias",
    "UBS Arei√£o", "UBS Baeta", "UBS Batistini", "UBS Calux", "UBS Caminho do Mar",
    "UBS Demarchi", "UBS Farina", "UBS Ferraz√≥polis", "UBS Finco", "UBS Ip√™",
     "UBS Jordan√≥polis", "UBS Leblon", "UBS Montanh√£o", "UBS Nazareth",
    "UBS Orqu√≠deas", "UBS Parque S√£o Bernardo", "UBS Paulic√©ia", "UBS Planalto", "UBS Represa",
    "UBS Riacho", "UBS Rudge Ramos", "UBS Santa Cruz", "UBS Santa Terezinha", "UBS S√£o Pedro",
    "UBS S√£o Pedro II", "UBS Selecta", "UBS Silvina", "UBS Tabo√£o", "UBS Uni√£o",
    "UBS Vila Dayse", "UBS Vila Esperan√ßa", "UBS Vila Euclides", "UBS Vila Marchi",
    "UBS Vila Rosa", "UGP", "Unidade de Coordena√ß√£o de Programas", "Unidade Gestora do Projeto",
    "Unidades Externas", "UPA Alvarenga", "UPA Alves Dias", "UPA Baeta", "UPA Demarchi",
    "UPA Jardim Silvina / Selecta", "UPA Paulic√©ia", "UPA Riacho", "UPA Rudge",
    "UPA S. Pedro", "UPA Silvina"
]
PASTA_PLANILHAS = Path(r"Q:\SS-511\Registro de chamados")
NOME_ARQUIVO = "chamados_{}.xlsx"
ARQUIVO_CONTROLE = PASTA_PLANILHAS / "controle.txt"

# --- Vari√°veis Globais ---
contadores = {unidade: 0 for unidade in UNIDADES}
total_chamados = 0
caminho_planilha = None
data_inicio_planilha = None
filtro_entry = None
canvas = None
frame = None
total_label = None  # Label para exibir o total de chamados

# --- Fun√ß√µes de Arquivo ---


def criar_pasta_planilhas():
    """Cria a pasta para armazenar as planilhas, se ela n√£o existir."""
    PASTA_PLANILHAS.mkdir(parents=True, exist_ok=True)

def carregar_arquivo_controle():
    """Carrega a data de in√≠cio da planilha e o total de chamados do arquivo de controle."""
    global data_inicio_planilha, total_chamados
    if ARQUIVO_CONTROLE.exists():
        try:
            with open(ARQUIVO_CONTROLE, "r") as f:
                linhas = f.readlines()
                data_inicio_planilha = datetime.strptime(linhas[0].strip(), "%Y%m%d").date()
                total_chamados = int(linhas[1].strip())
        except (FileNotFoundError, ValueError, IndexError):
            # Se o arquivo n√£o existir ou estiver corrompido, define a data de in√≠cio como hoje
            data_inicio_planilha = datetime.today().date()
            total_chamados = 0
            salvar_arquivo_controle()  # Cria um novo arquivo de controle
    else:
        data_inicio_planilha = datetime.today().date()
        total_chamados = 0
        salvar_arquivo_controle()  # Cria um novo arquivo de controle

def salvar_arquivo_controle():
    """Salva a data de in√≠cio da planilha e o total de chamados no arquivo de controle."""
    try:
        with open(ARQUIVO_CONTROLE, "w") as f:
            f.write(data_inicio_planilha.strftime("%Y%m%d") + "\n")
            f.write(str(total_chamados) + "\n")
    except Exception as e:
        messagebox.showerror("Erro", f"Erro ao salvar o arquivo de controle: {e}")

def definir_caminho_planilha():
    """Define o caminho da planilha com base na data de in√≠cio."""
    global caminho_planilha, data_inicio_planilha
    hoje = datetime.today().date()
    if data_inicio_planilha is None:
        carregar_arquivo_controle()  # Carrega a data de in√≠cio se ainda n√£o foi carregada

    if (hoje - data_inicio_planilha).days >= 31:
        # Cria nova planilha se passaram 31 dias
        data_inicio_planilha = hoje
        salvar_arquivo_controle()
    caminho_planilha = PASTA_PLANILHAS / NOME_ARQUIVO.format(data_inicio_planilha.strftime("%Y%m%d"))
    return caminho_planilha
    

def carregar_planilha():
    """Carrega os dados da planilha, se existir."""
    global contadores, caminho_planilha
    caminho_planilha = definir_caminho_planilha()  # Garante que o caminho est√° definido
    if caminho_planilha.exists():
        try:
            df = pd.read_excel(caminho_planilha)
            # Verifica se as colunas 'Unidade' e 'Chamados' existem no DataFrame
            if 'Unidade' in df.columns and 'Chamados' in df.columns:
                contadores = dict(zip(df["Unidade"], df["Chamados"]))
            else:
                messagebox.showinfo("Aviso", "Colunas 'Unidade' ou 'Chamados' n√£o encontradas na planilha. Criando nova planilha.")
        except FileNotFoundError:
            messagebox.showinfo("Aviso", "Planilha n√£o encontrada. Criando nova planilha.")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar a planilha: {e}")
 
def salvar_planilha():
    """Salva os dados na planilha."""
    print(f" Tentando salvar planilha em: {PASTA_USUARIO}")

    df = pd.DataFrame(list(contadores.items()), columns=["Unidade", "Chamados"])
    try:
        df.to_excel(caminho_planilha, index=False)
    except PermissionError:
        messagebox.showerror("Erro", "Feche a planilha antes de salvar.")
    except Exception as e:
        messagebox.showerror("Erro", f"Erro ao salvar a planilha: {e}")

# --- Fun√ß√µes de L√≥gica ---
def registrar_chamado(unidade):
    """Registra um chamado para a unidade e atualiza a planilha."""
    global total_chamados
    contadores[unidade] += 1
    total_chamados += 1
    salvar_planilha()
    salvar_arquivo_controle()
    atualizar_interface()
    messagebox.showinfo("Registrado", f"Chamado registrado para {unidade}")

def zerar_planilha():
    """Zera todos os chamados."""
    global contadores, total_chamados
    contadores = {unidade: 0 for unidade in UNIDADES}
    total_chamados = 0
    salvar_planilha()
    salvar_arquivo_controle()
    atualizar_interface()
    messagebox.showinfo("Zerado", "Todos os chamados foram zerados!")

# --- Fun√ß√µes de Interface ---
def atualizar_interface():
    """Atualiza os n√∫meros exibidos na interface gr√°fica."""
    filtro = filtro_entry.get().lower()
    unidades_filtradas = [u for u in UNIDADES if filtro in u.lower()]
    for i, unidade in enumerate(unidades_filtradas):
        # Verifica se o widget j√° existe
        if i < len(frame.winfo_children()) // 2:  # Cada unidade tem um bot√£o e um label
            btn = frame.winfo_children()[i*2]
            lbl = frame.winfo_children()[i*2 + 1]
            btn.config(text=unidade, command=lambda u=unidade: registrar_chamado(u))
            lbl.config(text=str(contadores.get(unidade, 0)))
        else:  # Cria novos widgets se necess√°rio
            btn = tk.Button(frame, text=unidade, command=lambda u=unidade: registrar_chamado(u))
            btn.grid(row=i, column=0, padx=5, pady=5, sticky="ew")
            lbl = tk.Label(frame, text=str(contadores.get(unidade, 0)))
            lbl.grid(row=i, column=1, padx=5, pady=5, sticky="ew")

    # Remove widgets excedentes
    while len(frame.winfo_children()) > len(unidades_filtradas) * 2:
        frame.winfo_children()[-1].destroy()
        frame.winfo_children()[-1].destroy()

    # Atualiza o label do total de chamados
    total_label.config(text=f"Total de Chamados: {total_chamados}")

    canvas.update_idletasks()
    canvas.config(scrollregion=canvas.bbox("all"))

def on_mousewheel(event):
    """Fun√ß√£o para lidar com o evento de rolar o mouse."""
    canvas.yview_scroll(int(-1*(event.delta/120)), "units")

# --- Inicializa√ß√£o da Interface ---
def criar_interface():
    """Cria a interface gr√°fica."""
    root = tk.Tk()
    root.title("Registro de Chamados")

    # Menu
    menu_bar = tk.Menu(root)
    opcoes_menu = tk.Menu(menu_bar, tearoff=0)
    opcoes_menu.add_command(label="Zerar Chamados", command=zerar_planilha)
    menu_bar.add_cascade(label="Op√ß√µes", menu=opcoes_menu)
    root.config(menu=menu_bar)

    # Filtro
    global filtro_entry, canvas, frame, total_label  # Inclui total_label na lista de globais
    filtro_entry = tk.Entry(root)
    filtro_entry.pack(pady=5, fill="x")
    filtro_entry.bind("<KeyRelease>", lambda event: atualizar_interface())

    # Canvas e Scrollbar
    canvas = tk.Canvas(root)
    scrollbar = tk.Scrollbar(root, orient="vertical", command=canvas.yview)
    frame = tk.Frame(canvas)
    canvas.create_window((0, 0), window=frame, anchor='nw')
    canvas.configure(yscrollcommand=scrollbar.set)
    scrollbar.pack(side="right", fill="y")
    canvas.pack(side="left", fill="both", expand=True)

    # Layout do Frame
    frame.columnconfigure(0, weight=1)
    frame.columnconfigure(1, weight=1)

    # Label para exibir o total de chamados
    total_label = tk.Label(root, text="Total de Chamados: 0", font=("Arial", 12))
    total_label.pack(pady=10)

    # Assinatura
    assinatura = tk.Label(root, text="Create By Arthur Renzo e Arthur Melo", fg="gray", font=("Arial", 8))
    assinatura.pack(side="bottom", pady=5)

    # Bind do evento de rolagem do mouse ao canvas
    canvas.bind("<MouseWheel>", on_mousewheel)  # Para Windows
    canvas.bind("<Button-4>", on_mousewheel)  # Para Linux
    canvas.bind("<Button-5>", on_mousewheel)  # Para Linux

    return root

# --- Main ---
if __name__ == "__main__":
    criar_pasta_planilhas()
    carregar_arquivo_controle()  # Carrega a data de in√≠cio da planilha
    carregar_planilha()

    root = criar_interface()
    atualizar_interface()  # Carrega a interface inicial
    root.mainloop()
